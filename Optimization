{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7f7bbcd1",
   "metadata": {},
   "source": [
    "# Assignment 7 Optimization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5af51c61",
   "metadata": {},
   "source": [
    "# Python\n",
    "\n",
    "* Do this one time only, from https://pypi.org/project/pymprog/\n",
    "# pip install pymprog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b6a91ba7-0de2-4497-b6e2-e08e81b8d120",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pymprog\n",
      "  Downloading pymprog-1.1.2.tar.gz (44 kB)\n",
      "\u001b[K     |████████████████████████████████| 44 kB 3.3 MB/s eta 0:00:01\n",
      "\u001b[?25hCollecting swiglpk>=1.4.4\n",
      "  Downloading swiglpk-5.0.3-cp38-cp38-macosx_10_9_x86_64.whl (841 kB)\n",
      "\u001b[K     |████████████████████████████████| 841 kB 6.3 MB/s eta 0:00:01\n",
      "\u001b[?25hBuilding wheels for collected packages: pymprog\n",
      "  Building wheel for pymprog (setup.py) ... \u001b[?25ldone\n",
      "\u001b[?25h  Created wheel for pymprog: filename=pymprog-1.1.2-py3-none-any.whl size=43501 sha256=e337009f23a662b7f1d55804380eb6c9d4483749a6963199b04b8ed9e745ee88\n",
      "  Stored in directory: /Users/sashamunir/Library/Caches/pip/wheels/10/2a/01/9a82fe61bf9c42e427db3d65e099fa9e9f715ec1c6429f258d\n",
      "Successfully built pymprog\n",
      "Installing collected packages: swiglpk, pymprog\n",
      "Successfully installed pymprog-1.1.2 swiglpk-5.0.3\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install pymprog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "afe76dfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = \"all\"\n",
    "\n",
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from   scipy   import   stats"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84b678bf",
   "metadata": {},
   "source": [
    "# Minimization Problem: Chemicals\n",
    "* M&D Chemicals produces <b>two</b> products that are sold as raw materials to companies that \n",
    "manufacture bath soaps and laundry detergents. \n",
    "* based on an analysis of current inventory levels and potential demand for the coming month,\n",
    "M&D’s management specified that: \n",
    "    + <b> combined production for products A and B must total at least 350 gallons</b>\n",
    "    +  <b> they must fill an order for 225 gallons consisting of product A</b>\n",
    "\n",
    "<b>Objective: Satisfy these requirements at a minimum total production cost. </b>\n",
    "\n",
    "\n",
    "### Processing time\n",
    "    + Product A: 2 hours/gallon\n",
    "    + Product B: 1 hour/gallon\n",
    "    + For the coming month, 600 hours of processing time are available.\n",
    "\n",
    "### Production cost: \n",
    "* Product A: 4 dollars/gallon\n",
    "* Product B: 6 dollars/gallon\n",
    "\n",
    "#### Decision variables:\n",
    "    + x1: the amount of product A to produce in thousand gallons\n",
    "    + x2: the amount of product B to produce in thousand gallons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6451912f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "model('production') is the default model."
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Min production: 4 * x1 + 6 * x2"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "R1: + x1 >= 225"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "R2: + x1 + x2 >= 350"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "R3: 2 * x1 + x2 <= 600"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(+ x1, x2 >= 0 continuous)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Minimum total production cost: 1600.0\n",
      "\n",
      "PyMathProg 1.0 Sensitivity Report Created: 2021/10/31 Sun 22:40PM\n",
      "================================================================================\n",
      "Variable            Activity   Dual.Value     Obj.Coef   Range.From   Range.Till\n",
      "--------------------------------------------------------------------------------\n",
      "*x1                      250            0            4 -1.79769e+308            6\n",
      "*x2                      100            0            6            4 1.79769e+308\n",
      "================================================================================\n",
      "================================================================================\n",
      "Constraint       Activity Dual.Value  Lower.Bnd  Upper.Bnd RangeLower RangeUpper\n",
      "--------------------------------------------------------------------------------\n",
      "*R1                   250          0        225        inf        250        250\n",
      " R2                   350          8        350        inf        300        375\n",
      " R3                   600         -2       -inf        600        575        700\n",
      "================================================================================\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "model('production') is not the default model."
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pymprog as pm\n",
    "\n",
    "pm.begin('production')\n",
    "\n",
    "x1, x2 = pm.var('x1,x2')\n",
    "\n",
    "# Objective function: minimize Z = 2* x1 + 3* x2\n",
    "pm.minimize(4 * x1 + 6 * x2, 'production')\n",
    "\n",
    " \n",
    "# constraints\n",
    "\n",
    "+ x1  >= 225       \n",
    "+ x1  + x2 >= 350   \n",
    "+ 2 * x1 + x2 <= 600   \n",
    "+ x1, x2  >= 0 \n",
    "\n",
    "# solve\n",
    "pm.solve()\n",
    "\n",
    "# print results\n",
    "print('\\n Minimum total production cost:',pm.vobj())  \n",
    "pm.sensitivity()  \n",
    "\n",
    "pm.end()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ddbe7100",
   "metadata": {},
   "source": [
    "* Directions: Use pmprog to solve the following Linear Optimizations Problems"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8597658",
   "metadata": {},
   "source": [
    "# Analysis: Fill in the blank\n",
    "\n",
    "* The optimal solution (Figure 12.7) is to make <b>250 gallons</b> of product A and <b>100 gallons</b> of product B\n",
    "* for a total cost of <b>$1600</b>.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "982fa91d",
   "metadata": {},
   "source": [
    "# Maximization Problem: Leather Backpacks"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6659da27",
   "metadata": {},
   "source": [
    "* Operations involved in manufacturing a leather backpack: Cutting and dyeing the material.\n",
    "Sewing; Finishing, and Inspection and packaging\n",
    "\n",
    "## Estimated total time available for the next three months to perform different operations\n",
    "* cutting and dyeing: 700\n",
    "* sewing: 600\n",
    "* finishing: 708\n",
    "* inspecting & packaging: 135\n",
    "\n",
    "#### Required profit contribution:\n",
    "* Standard bag:  90 dollars/bag\n",
    "* Deluxe bag: 100 dollasr/bag\n",
    "\n",
    "#### Goal: \n",
    "* To determine the number of standard bags and the number of deluxe bags to produce to maximize total profit contribution\n",
    "* let x1 = number of standard bags\n",
    "* let x2 = number of deluxe bags\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2515b346",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "model('production') is the default model."
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Max production: 90 * x1 + 100 * x2"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "R1: 0.7 * x1 + x2 <= 700"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "R2: 0.5 * x1 + 0.8333333333333334 * x2 <= 600"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "R3: x1 + 0.6666666666666666 * x2 <= 708"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "R4: 0.1 * x1 + 0.25 * x2 <= 135"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(x1 >= 0 continuous, x2 >= 0 continuous)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Maximize profit: 77727.27272727272\n",
      "\n",
      "PyMathProg 1.0 Sensitivity Report Created: 2021/10/31 Sun 22:39PM\n",
      "================================================================================\n",
      "Variable            Activity   Dual.Value     Obj.Coef   Range.From   Range.Till\n",
      "--------------------------------------------------------------------------------\n",
      "*x1                  474.545            0           90           40          150\n",
      "*x2                  350.182            0          100           60          225\n",
      "================================================================================\n",
      "================================================================================\n",
      "Constraint       Activity Dual.Value  Lower.Bnd  Upper.Bnd RangeLower RangeUpper\n",
      "--------------------------------------------------------------------------------\n",
      "*R1               682.364          0       -inf        700    682.364    682.364\n",
      "*R2               529.091          0       -inf        600    529.091    529.091\n",
      " R3                   708    68.1818       -inf        708        360    751.111\n",
      " R4                   135    218.182       -inf        135       70.8    141.063\n",
      "================================================================================\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "model('production') is not the default model."
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pymprog as pm\n",
    "\n",
    "\n",
    "pm.begin('production')\n",
    "x1, x2 = pm.var('x1, x2') # variables\n",
    "\n",
    "# Objective function: minimize Z = 2* x1 + 3* x2\n",
    "pm.maximize(90 * x1 + 100 * x2, 'production') \n",
    "\n",
    "# constraints\n",
    "7/10 * x1 + 1 * x2 <= 700\n",
    "1/2 * x1 + 5/6 * x2 <= 600\n",
    "1 * x1 + 2/3 * x2 <= 708\n",
    "1/10 * x1 + 1/4 * x2 <= 135\n",
    "\n",
    "x1, x2  >= 0   \n",
    "\n",
    "# solve\n",
    "pm.solve()\n",
    "\n",
    "\n",
    "# print results\n",
    "print('\\n Maximize profit:',pm.vobj())  # value of objective\n",
    "pm.sensitivity()\n",
    "pm.end()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4949c749",
   "metadata": {},
   "source": [
    "# Analysis: Fill in blank\n",
    "*  To maximize total profit contribution, make 474 Standard bags and 350 Deluxe bags for a profit of 77,727 dollars."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
